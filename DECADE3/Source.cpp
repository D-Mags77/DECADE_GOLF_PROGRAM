#include <iostream>
#include <stdio.h>
#include <string>
#include<vector> 


using namespace std;

vector<double> strokesgaineddrivingvector;
vector<double> strokesgainedapproachvector;
vector<double> strokesgainedgreensidevector;
vector<double> strokesgainedputtingvector;
vector<int> totalshotsvector;
vector<int> totalfairwayshit;
vector<int> totalgreensinregulation;
vector<int> twoputts;
/*void testingcalculations() {
    for (size_t i = 0; i < strokesgaineddrivingvector.size(); ++i) {
        cout << strokesgaineddrivingvector[i] << " ";
    }
    cout << endl;

    for (size_t i = 0; i < strokesgainedapproachvector.size(); ++i) {
        cout << strokesgainedapproachvector[i] << " ";
    }
    cout << endl;

    for (size_t i = 0; i < strokesgainedgreensidevector.size(); ++i) {
        cout << strokesgainedgreensidevector[i] << " ";
    }
    cout << endl;

    for (size_t i = 0; i < strokesgainedputtingvector.size(); ++i) {
        cout << strokesgainedputtingvector[i] << " ";
    }
    cout << endl;

    
}*/

void removelastelementapproachvector() {
    if (!strokesgainedapproachvector.empty()) {
        strokesgainedapproachvector.pop_back();
    }
}

void removelastelementdrivingvector() {
    if (!strokesgaineddrivingvector.empty()) {
        strokesgaineddrivingvector.pop_back();
    }
}

void removelastelementputtingvector() {
    if (!strokesgainedputtingvector.empty()) {
        strokesgainedputtingvector.pop_back();
    }
}

int addtotalshots(int totalshots) {
    totalshotsvector.push_back(totalshots);

    return 0;
}

int totalshotscalculations(int totalpar) {
    int sum1 = 0;
    int sum2 = 0;

    for (int i = 0; i < totalshotsvector.size(); i++)
        sum1 += totalshotsvector[i];

    cout << "Total Shots: " << sum1 << endl;
    
    sum2 = sum1 - totalpar;

    if (sum2 >= 0) {
        cout << "You Shot " << sum2 << " Over Par" << endl;
    }

    if (sum2 < 0) {
        cout << "You Shot " << sum2 << " Under Par" << endl;
    }

    return 0;
}

double addDrive(double strokesgaineddriving) {

    strokesgaineddrivingvector.push_back(strokesgaineddriving);

    

    return 0;
}

double addApproach(double strokesgainedirons) {
   
    strokesgainedapproachvector.push_back(strokesgainedirons);

    return 0;
}


double addGreenside(double strokesgainedirons) { 

    strokesgainedgreensidevector.push_back(strokesgainedirons);


   

    return 0;

}

double addPutting(double strokesgainedputting) {
    strokesgainedputtingvector.push_back(strokesgainedputting);
    

    return 0;

}


double strokesgaineddrivingcalculations(double expectedscoreValue, double expectedscore) {
    double strokesgaineddriving = expectedscoreValue - expectedscore - 1;

    




    return strokesgaineddriving;
}


double strokesgainedironcalculations(double expectedscoreValue, double expectedscore) {
    double strokesgainedirons = expectedscoreValue - expectedscore - 1;

  

    return strokesgainedirons;

}

double strokesgainedputtingcalculations(double expectedscoreValue, double expectedscore) {
    double strokesgainedputting = expectedscoreValue - expectedscore - 1;
    
   

    return strokesgainedputting;
}

 

double fairwayvalues(int yardage) {
    int placeholder = 0;
    double expectedscorefairway;

    double listvalues[600] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
        101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
        111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
        121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
        131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
        141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
        151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
        161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
        171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
        181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
        191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
        201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
        211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
        231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
        241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
        251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
        261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
        271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
        281, 282, 283, 284, 285, 286, 287, 288, 289, 290,
        291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
        301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
        311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
        321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
        331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
        341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
        351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
        361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
        371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
        381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
        391, 392, 393, 394, 395, 396, 397, 398, 399, 400,
        401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
        411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
        421, 422, 423, 424, 425, 426, 427, 428, 429, 430,
        431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
        441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
        451, 452, 453, 454, 455, 456, 457, 458, 459, 460,
        461, 462, 463, 464, 465, 466, 467, 468, 469, 470,
        471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
        481, 482, 483, 484, 485, 486, 487, 488, 489, 490,
        491, 492, 493, 494, 495, 496, 497, 498, 499, 500,
        501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
        511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
        521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
        531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
        541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
        551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
        561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
        571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
        581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
        591, 592, 593, 594, 595, 596, 597, 598, 599, 600 };
    double listvalues2[600] = { 1.236, 1.554, 1.767, 1.911, 1.991, 2.05, 2.09, 2.128, 2.162, 2.18, 2.216, 2.242, 2.262, 2.287, 2.31, 2.33, 2.351, 2.358, 2.373, 2.4, 2.416, 2.427, 2.439, 2.45, 2.46, 2.471, 2.483, 2.494, 2.501, 2.52, 2.5257, 2.5314, 2.5371, 2.5429, 2.5486, 2.5543, 2.56, 2.5657, 2.5714, 2.5771, 2.5829, 2.5886, 2.5943, 2.6, 2.6057, 2.6114, 2.6171, 2.6229, 2.6286, 2.6343, 2.64, 2.6457, 2.6514, 2.6571, 2.6629, 2.6686, 2.6743, 2.68, 2.6857, 2.6914, 2.696, 2.701, 2.704, 2.707, 2.71, 2.713, 2.716, 2.719, 2.722, 2.725, 2.728, 2.731, 2.734, 2.737, 2.74, 2.743, 2.746, 2.749, 2.752, 2.755, 2.758, 2.761, 2.764, 2.767, 2.77, 2.773, 2.776, 2.779, 2.782, 2.785, 2.788, 2.791, 2.794, 2.797, 2.8, 2.803, 2.806, 2.809, 2.812, 2.815, 2.803, 2.805, 2.808, 2.81, 2.813, 2.815, 2.818, 2.82, 2.823, 2.825, 2.828, 2.83, 2.833, 2.835, 2.838, 2.84, 2.843, 2.845, 2.848, 2.85, 2.853, 2.856, 2.859, 2.862, 2.865, 2.868, 2.871, 2.874, 2.877, 2.88, 2.883, 2.886, 2.889, 2.892, 2.895, 2.898, 2.901, 2.904, 2.907, 2.91, 2.914, 2.917, 2.921, 2.924, 2.928, 2.931, 2.935, 2.938, 2.942, 2.945, 2.949, 2.952, 2.956, 2.959, 2.963, 2.966, 2.97, 2.973, 2.977, 2.98, 2.985, 2.99, 2.995, 3, 3.005, 3.01, 3.015, 3.02, 3.025, 3.03, 3.035, 3.04, 3.045, 3.05, 3.055, 3.06, 3.065, 3.07, 3.075, 3.08, 3.086, 3.091, 3.097, 3.102, 3.108, 3.113, 3.119, 3.124, 3.13, 3.135, 3.141, 3.146, 3.152, 3.157, 3.163, 3.168, 3.174, 3.179, 3.185, 3.19, 3.197, 3.203, 3.21, 3.216, 3.223, 3.229, 3.236, 3.242, 3.249, 3.255, 3.262, 3.268, 3.275, 3.281, 3.288, 3.294, 3.301, 3.307, 3.314, 3.32, 3.327, 3.333, 3.34, 3.346, 3.353, 3.359, 3.366, 3.372, 3.379, 3.385, 3.392, 3.398, 3.405, 3.411, 3.418, 3.424, 3.431, 3.437, 3.444, 3.45, 3.457, 3.463, 3.47, 3.476, 3.483, 3.489, 3.496, 3.502, 3.509, 3.515, 3.522, 3.528, 3.535, 3.541, 3.548, 3.554, 3.561, 3.567, 3.574, 3.58, 3.586, 3.591, 3.597, 3.602, 3.608, 3.613, 3.619, 3.624, 3.63, 3.635, 3.641, 3.646, 3.652, 3.657, 3.663, 3.668, 3.674, 3.679, 3.684, 3.69, 3.695, 3.699, 3.704, 3.708, 3.713, 3.717, 3.722, 3.726, 3.731, 3.735, 3.74, 3.744, 3.749, 3.753, 3.758, 3.762, 3.767, 3.771, 3.776, 3.78, 3.783, 3.786, 3.789, 3.792, 3.795, 3.798, 3.801, 3.804, 3.807, 3.81, 3.813, 3.816, 3.819, 3.822, 3.825, 3.828, 3.831, 3.834, 3.837, 3.84, 3.842, 3.844, 3.846, 3.848, 3.85, 3.852, 3.854, 3.856, 3.858, 3.86, 3.862, 3.864, 3.866, 3.868, 3.87, 3.872, 3.874, 3.876, 3.878, 3.88, 3.884, 3.887, 3.891, 3.894, 3.898, 3.901, 3.905, 3.908, 3.912, 3.915, 3.919, 3.922, 3.926, 3.929, 3.933, 3.936, 3.94, 3.943, 3.947, 3.95, 3.954, 3.958, 3.962, 3.966, 3.97, 3.974, 3.978, 3.982, 3.986, 3.99, 3.994, 3.998, 4.002, 4.006, 4.01, 4.014, 4.018, 4.022, 4.026, 4.03, 4.034, 4.038, 4.042, 4.046, 4.05, 4.054, 4.058, 4.062, 4.066, 4.07, 4.074, 4.078, 4.082, 4.086, 4.09, 4.094, 4.098, 4.102, 4.106, 4.11, 4.112, 4.114, 4.116, 4.118, 4.12, 4.122, 4.124, 4.126, 4.128, 4.13, 4.132, 4.134, 4.136, 4.138, 4.14, 4.142, 4.144, 4.146, 4.148, 4.15, 4.153, 4.155, 4.158, 4.16, 4.163, 4.165, 4.168, 4.17, 4.173, 4.175, 4.178, 4.18, 4.183, 4.185, 4.188, 4.19, 4.193, 4.195, 4.198, 4.2, 4.205, 4.209, 4.214, 4.218, 4.223, 4.227, 4.232, 4.2356, 4.241, 4.245, 4.25, 4.254, 4.259, 4.263, 4.268, 4.272, 4.277, 4.281, 4.286, 4.29, 4.296, 4.301, 4.307, 4.312, 4.318, 4.323, 4.329, 4.334, 4.34, 4.345, 4.351, 4.356, 4.362, 4.367, 4.373, 4.378, 4.384, 4.389, 4.395, 4.44, 4.407, 4.413, 4.42, 4.426, 4.433, 4.439, 4.446, 4.452, 4.459, 4.465, 4.472, 4.478, 4.485, 4.491, 4.498, 4.504, 4.511, 4.517, 4.524, 4.53, 4.537, 4.543, 4.55, 4.556, 4.563, 4.569, 4.576, 4.582, 4.589, 4.595, 4.602, 4.608, 4.615, 4.621, 4.628, 4.634, 4.641, 4.647, 4.654, 4.66, 4.666, 4.67, 4.678, 4.684, 4.69, 4.696, 4.702, 4.708, 4.714, 4.72, 4.726, 4.732, 4.738, 4.744, 4.75, 4.756, 4.762, 4.768, 4.774, 4.78, 4.784, 4.788, 4.792, 4.796, 4.8, 4.804, 4.808, 4.812, 4.816, 4.82, 4.824, 4.828, 4.832, 4.836, 4.84, 4.844, 4.848, 4.852, 4.856, 4.86, 4.863, 4.865, 4.868, 4.87, 4.873, 4.875, 4.878, 4.88, 4.883, 4.885, 4.888, 4.89, 4.893, 4.895, 4.898, 4.9, 4.903, 4.905, 4.908, 4.91, 4.912, 4.913, 4.915, 4.916, 4.918, 4.919, 4.921, 4.922, 4.924, 4.925, 4.927, 4.928, 4.93, 4.931, 4.933, 4.934, 4.936, 4.937, 4.939, 4.94 };

    for (int i = 0; i < yardage; i++) {

        if (yardage >= listvalues[i]) {
            placeholder = i;

        }

    }
   

    expectedscorefairway = listvalues2[placeholder];
   

    

    return expectedscorefairway;

}

double secondfairwayvalues(int previousyardage) {
    int placeholder = 0;
    double expectedscorefairway;

    double listvalues[600] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
        101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
        111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
        121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
        131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
        141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
        151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
        161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
        171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
        181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
        191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
        201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
        211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
        231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
        241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
        251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
        261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
        271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
        281, 282, 283, 284, 285, 286, 287, 288, 289, 290,
        291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
        301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
        311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
        321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
        331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
        341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
        351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
        361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
        371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
        381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
        391, 392, 393, 394, 395, 396, 397, 398, 399, 400,
        401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
        411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
        421, 422, 423, 424, 425, 426, 427, 428, 429, 430,
        431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
        441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
        451, 452, 453, 454, 455, 456, 457, 458, 459, 460,
        461, 462, 463, 464, 465, 466, 467, 468, 469, 470,
        471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
        481, 482, 483, 484, 485, 486, 487, 488, 489, 490,
        491, 492, 493, 494, 495, 496, 497, 498, 499, 500,
        501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
        511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
        521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
        531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
        541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
        551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
        561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
        571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
        581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
        591, 592, 593, 594, 595, 596, 597, 598, 599, 600 };
    double listvalues2[600] = { 1.236, 1.554, 1.767, 1.911, 1.991, 2.05, 2.09, 2.128, 2.162, 2.18, 2.216, 2.242, 2.262, 2.287, 2.31, 2.33, 2.351, 2.358, 2.373, 2.4, 2.416, 2.427, 2.439, 2.45, 2.46, 2.471, 2.483, 2.494, 2.501, 2.52, 2.5257, 2.5314, 2.5371, 2.5429, 2.5486, 2.5543, 2.56, 2.5657, 2.5714, 2.5771, 2.5829, 2.5886, 2.5943, 2.6, 2.6057, 2.6114, 2.6171, 2.6229, 2.6286, 2.6343, 2.64, 2.6457, 2.6514, 2.6571, 2.6629, 2.6686, 2.6743, 2.68, 2.6857, 2.6914, 2.696, 2.701, 2.704, 2.707, 2.71, 2.713, 2.716, 2.719, 2.722, 2.725, 2.728, 2.731, 2.734, 2.737, 2.74, 2.743, 2.746, 2.749, 2.752, 2.755, 2.758, 2.761, 2.764, 2.767, 2.77, 2.773, 2.776, 2.779, 2.782, 2.785, 2.788, 2.791, 2.794, 2.797, 2.8, 2.803, 2.806, 2.809, 2.812, 2.815, 2.803, 2.805, 2.808, 2.81, 2.813, 2.815, 2.818, 2.82, 2.823, 2.825, 2.828, 2.83, 2.833, 2.835, 2.838, 2.84, 2.843, 2.845, 2.848, 2.85, 2.853, 2.856, 2.859, 2.862, 2.865, 2.868, 2.871, 2.874, 2.877, 2.88, 2.883, 2.886, 2.889, 2.892, 2.895, 2.898, 2.901, 2.904, 2.907, 2.91, 2.914, 2.917, 2.921, 2.924, 2.928, 2.931, 2.935, 2.938, 2.942, 2.945, 2.949, 2.952, 2.956, 2.959, 2.963, 2.966, 2.97, 2.973, 2.977, 2.98, 2.985, 2.99, 2.995, 3, 3.005, 3.01, 3.015, 3.02, 3.025, 3.03, 3.035, 3.04, 3.045, 3.05, 3.055, 3.06, 3.065, 3.07, 3.075, 3.08, 3.086, 3.091, 3.097, 3.102, 3.108, 3.113, 3.119, 3.124, 3.13, 3.135, 3.141, 3.146, 3.152, 3.157, 3.163, 3.168, 3.174, 3.179, 3.185, 3.19, 3.197, 3.203, 3.21, 3.216, 3.223, 3.229, 3.236, 3.242, 3.249, 3.255, 3.262, 3.268, 3.275, 3.281, 3.288, 3.294, 3.301, 3.307, 3.314, 3.32, 3.327, 3.333, 3.34, 3.346, 3.353, 3.359, 3.366, 3.372, 3.379, 3.385, 3.392, 3.398, 3.405, 3.411, 3.418, 3.424, 3.431, 3.437, 3.444, 3.45, 3.457, 3.463, 3.47, 3.476, 3.483, 3.489, 3.496, 3.502, 3.509, 3.515, 3.522, 3.528, 3.535, 3.541, 3.548, 3.554, 3.561, 3.567, 3.574, 3.58, 3.586, 3.591, 3.597, 3.602, 3.608, 3.613, 3.619, 3.624, 3.63, 3.635, 3.641, 3.646, 3.652, 3.657, 3.663, 3.668, 3.674, 3.679, 3.684, 3.69, 3.695, 3.699, 3.704, 3.708, 3.713, 3.717, 3.722, 3.726, 3.731, 3.735, 3.74, 3.744, 3.749, 3.753, 3.758, 3.762, 3.767, 3.771, 3.776, 3.78, 3.783, 3.786, 3.789, 3.792, 3.795, 3.798, 3.801, 3.804, 3.807, 3.81, 3.813, 3.816, 3.819, 3.822, 3.825, 3.828, 3.831, 3.834, 3.837, 3.84, 3.842, 3.844, 3.846, 3.848, 3.85, 3.852, 3.854, 3.856, 3.858, 3.86, 3.862, 3.864, 3.866, 3.868, 3.87, 3.872, 3.874, 3.876, 3.878, 3.88, 3.884, 3.887, 3.891, 3.894, 3.898, 3.901, 3.905, 3.908, 3.912, 3.915, 3.919, 3.922, 3.926, 3.929, 3.933, 3.936, 3.94, 3.943, 3.947, 3.95, 3.954, 3.958, 3.962, 3.966, 3.97, 3.974, 3.978, 3.982, 3.986, 3.99, 3.994, 3.998, 4.002, 4.006, 4.01, 4.014, 4.018, 4.022, 4.026, 4.03, 4.034, 4.038, 4.042, 4.046, 4.05, 4.054, 4.058, 4.062, 4.066, 4.07, 4.074, 4.078, 4.082, 4.086, 4.09, 4.094, 4.098, 4.102, 4.106, 4.11, 4.112, 4.114, 4.116, 4.118, 4.12, 4.122, 4.124, 4.126, 4.128, 4.13, 4.132, 4.134, 4.136, 4.138, 4.14, 4.142, 4.144, 4.146, 4.148, 4.15, 4.153, 4.155, 4.158, 4.16, 4.163, 4.165, 4.168, 4.17, 4.173, 4.175, 4.178, 4.18, 4.183, 4.185, 4.188, 4.19, 4.193, 4.195, 4.198, 4.2, 4.205, 4.209, 4.214, 4.218, 4.223, 4.227, 4.232, 4.2356, 4.241, 4.245, 4.25, 4.254, 4.259, 4.263, 4.268, 4.272, 4.277, 4.281, 4.286, 4.29, 4.296, 4.301, 4.307, 4.312, 4.318, 4.323, 4.329, 4.334, 4.34, 4.345, 4.351, 4.356, 4.362, 4.367, 4.373, 4.378, 4.384, 4.389, 4.395, 4.44, 4.407, 4.413, 4.42, 4.426, 4.433, 4.439, 4.446, 4.452, 4.459, 4.465, 4.472, 4.478, 4.485, 4.491, 4.498, 4.504, 4.511, 4.517, 4.524, 4.53, 4.537, 4.543, 4.55, 4.556, 4.563, 4.569, 4.576, 4.582, 4.589, 4.595, 4.602, 4.608, 4.615, 4.621, 4.628, 4.634, 4.641, 4.647, 4.654, 4.66, 4.666, 4.67, 4.678, 4.684, 4.69, 4.696, 4.702, 4.708, 4.714, 4.72, 4.726, 4.732, 4.738, 4.744, 4.75, 4.756, 4.762, 4.768, 4.774, 4.78, 4.784, 4.788, 4.792, 4.796, 4.8, 4.804, 4.808, 4.812, 4.816, 4.82, 4.824, 4.828, 4.832, 4.836, 4.84, 4.844, 4.848, 4.852, 4.856, 4.86, 4.863, 4.865, 4.868, 4.87, 4.873, 4.875, 4.878, 4.88, 4.883, 4.885, 4.888, 4.89, 4.893, 4.895, 4.898, 4.9, 4.903, 4.905, 4.908, 4.91, 4.912, 4.913, 4.915, 4.916, 4.918, 4.919, 4.921, 4.922, 4.924, 4.925, 4.927, 4.928, 4.93, 4.931, 4.933, 4.934, 4.936, 4.937, 4.939, 4.94 };

    for (int i = 0; i < 600; i++) {

        if (previousyardage >= listvalues[i]) {
            placeholder = i;

        }

    }

    expectedscorefairway = listvalues2[placeholder];
    cout << expectedscorefairway << endl;
    

    return expectedscorefairway;

}

double roughvalues(int yardage) {
    int placeholder = 0;
    double expectedscorerough;

    double listvalues[600] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
        101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
        111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
        121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
        131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
        141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
        151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
        161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
        171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
        181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
        191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
        201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
        211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
        231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
        241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
        251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
        261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
        271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
        281, 282, 283, 284, 285, 286, 287, 288, 289, 290,
        291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
        301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
        311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
        321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
        331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
        341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
        351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
        361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
        371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
        381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
        391, 392, 393, 394, 395, 396, 397, 398, 399, 400,
        401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
        411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
        421, 422, 423, 424, 425, 426, 427, 428, 429, 430,
        431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
        441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
        451, 452, 453, 454, 455, 456, 457, 458, 459, 460,
        461, 462, 463, 464, 465, 466, 467, 468, 469, 470,
        471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
        481, 482, 483, 484, 485, 486, 487, 488, 489, 490,
        491, 492, 493, 494, 495, 496, 497, 498, 499, 500,
        501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
        511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
        521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
        531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
        541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
        551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
        561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
        571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
        581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
        591, 592, 593, 594, 595, 596, 597, 598, 599, 600 };
    double listvalues2[600] = { 1.421, 1.709, 1.92, 2.063, 2.15, 2.205, 2.24, 2.288, 2.325, 2.344, 2.386, 2.415, 2.438, 2.467, 2.495, 2.514, 2.537, 2.546, 2.562, 2.59, 2.606, 2.617, 2.628, 2.638, 2.645, 2.657, 2.666, 2.676, 2.687, 2.7, 2.702, 2.704, 2.714, 2.723, 2.733, 2.742, 2.752, 2.761, 2.771, 2.78, 2.787, 2.793, 2.8, 2.806, 2.813, 2.819, 2.826, 2.832, 2.839, 2.845, 2.852, 2.858, 2.865, 2.871, 2.878, 2.884, 2.891, 2.897, 2.904, 2.91, 2.913, 2.915, 2.918, 2.92, 2.923, 2.925, 2.928, 2.93, 2.933, 2.935, 2.938, 2.94, 2.934, 2.945, 2.948, 2.95, 2.953, 2.955, 2.958, 2.96, 2.963, 2.966, 2.969, 2.972, 2.975, 2.978, 2.981, 2.984, 2.987, 2.99, 2.993, 2.996, 2.999, 3.002, 3.005, 3.008, 3.011, 3.014, 3.017, 3.02, 3.023, 3.026, 3.029, 3.032, 3.035, 3.038, 3.041, 3.044, 3.047, 3.05, 3.053, 3.056, 3.059, 3.062, 3.065, 3.068, 3.071, 3.074, 3.077, 3.08, 3.084, 3.087, 3.091, 3.094, 3.098, 3.101, 3.105, 3.108, 3.112, 3.115, 3.119, 3.122, 3.126, 3.129, 3.133, 3.136, 3.14, 3.143, 3.147, 3.15, 3.154, 3.158, 3.162, 3.166, 3.17, 3.174, 3.178, 3.182, 3.186, 3.19, 3.194, 3.198, 3.202, 3.206, 3.21, 3.214, 3.218, 3.222, 3.226, 3.23, 3.234, 3.238, 3.242, 3.246, 3.25, 3.254, 3.258, 3.262, 3.266, 3.27, 3.274, 3.278, 3.282, 3.286, 3.29, 3.294, 3.298, 3.302, 3.306, 3.31, 3.316, 3.321, 3.327, 3.332, 3.338, 3.343, 3.349, 3.354, 3.36, 3.365, 3.371, 3.376, 3.382, 3.387, 3.393, 3.398, 3.404, 3.409, 3.415, 3.42, 3.426, 3.431, 3.437, 3.442, 3.448, 3.453, 3.459, 3.464, 3.47, 3.475, 3.481, 3.486, 3.492, 3.497, 3.503, 3.508, 3.514, 3.519, 3.525, 3.53, 3.536, 3.541, 3.547, 3.552, 3.558, 3.563, 3.569, 3.574, 3.58, 3.585, 3.591, 3.596, 3.602, 3.607, 3.613, 3.618, 3.624, 3.629, 3.635, 3.64, 3.645, 3.65, 3.655, 3.66, 3.665, 3.67, 3.675, 3.68, 3.685, 3.69, 3.695, 3.7, 3.705, 3.71, 3.715, 3.72, 3.725, 3.73, 3.735, 3.74, 3.745, 3.749, 3.754, 3.758, 3.763, 3.767, 3.772, 3.776, 3.781, 3.785, 3.79, 3.794, 3.799, 3.803, 3.808, 3.812, 3.817, 3.821, 3.826, 3.83, 3.834, 3.837, 3.841, 3.844, 3.848, 3.851, 3.855, 3.858, 3.862, 3.865, 3.869, 3.872, 3.876, 3.879, 3.883, 3.886, 3.89, 3.893, 3.897, 3.9, 3.903, 3.905, 3.908, 3.91, 3.913, 3.915, 3.918, 3.92, 3.923, 3.925, 3.928, 3.93, 3.933, 3.935, 3.938, 3.94, 3.943, 3.945, 3.948, 3.95, 3.954, 3.957, 3.961, 3.964, 3.968, 3.971, 3.975, 3.978, 3.982, 3.985, 3.989, 3.992, 3.996, 3.999, 4.003, 4.006, 4.01, 4.013, 4.017, 4.02, 4.025, 4.029, 4.034, 4.038, 4.043, 4.047, 4.052, 4.056, 4.061, 4.065, 4.07, 4.074, 4.079, 4.083, 4.088, 4.092, 4.092, 4.101, 4.106, 4.11, 4.115, 4.12, 4.125, 4.13, 4.135, 4.14, 4.145, 4.15, 4.155, 4.16, 4.162, 4.17, 4.175, 4.18, 4.185, 4.19, 4.195, 4.2, 4.205, 4.21, 4.215, 4.219, 4.224, 4.228, 4.233, 4.237, 4.242, 4.246, 4.251, 4.255, 4.26, 4.264, 4.269, 4.273, 4.278, 4.282, 4.287, 4.291, 4.296, 4.3, 4.302, 4.304, 4.306, 4.308, 4.31, 4.312, 4.314, 4.316, 4.318, 4.32, 4.322, 4.324, 4.326, 4.328, 4.33, 4.332, 4.334, 4.336, 4.338, 4.34, 4.343, 4.345, 4.348, 4.35, 4.353, 4.355, 4.358, 4.36, 4.363, 4.365, 4.368, 4.37, 4.373, 4.375, 4.378, 4.38, 4.383, 4.385, 4.388, 4.39, 4.395, 4.399, 4.404, 4.408, 4.413, 4.417, 4.422, 4.426, 4.431, 4.435, 4.44, 4.444, 4.449, 4.453, 4.458, 4.462, 4.467, 4.471, 4.476, 4.48, 4.486, 4.491, 4.497, 4.502, 4.508, 4.513, 4.519, 4.524, 4.53, 4.535, 4.541, 4.546, 4.552, 4.557, 4.563, 4.568, 4.574, 4.579, 4.585, 4.59, 4.597, 4.603, 4.61, 4.616, 4.623, 4.629, 4.636, 4.642, 4.649, 4.655, 4.662, 4.668, 4.675, 4.681, 4.688, 4.694, 4.701, 4.707, 4.714, 4.72, 4.727, 4.733, 4.74, 4.746, 4.753, 4.759, 4.766, 4.772, 4.779, 4.785, 4.792, 4.798, 4.805, 4.811, 4.818, 4.824, 4.831, 4.837, 4.844, 4.85, 4.856, 4.862, 4.868, 4.874, 4.88, 4.886, 4.892, 4.898, 4.904, 4.91, 4.916, 4.922, 4.928, 4.934, 4.94, 4.946, 4.952, 4.958, 4.964, 4.97, 4.974, 4.978, 4.982, 4.986, 4.99, 4.994, 4.998, 5.002, 5.006, 5.01, 5.014, 5.018, 5.022, 5.026, 5.03, 5.034, 5.038, 5.042, 5.046, 5.05, 5.053, 5.055, 5.058, 5.06, 5.063, 5.065, 5.068, 5.07, 5.073, 5.075, 5.078, 5.08, 5.083, 5.085, 5.088, 5.09, 5.093, 5.095, 5.098, 5.1, 5.102, 5.103, 5.105, 5.106, 5.108, 5.109, 5.111, 5.112, 5.114, 5.115, 5.117, 5.118, 5.12, 5.121, 5.123, 5.124, 5.126, 5.127, 5.129, 5.13
    };

    for (int i = 0; i < 600; i++) {

        if (yardage >= listvalues[i]) {
            placeholder = i;

        }

    }

    expectedscorerough = listvalues2[placeholder];

   

    return expectedscorerough;


}

double bunkervalues(int yardage) {
    int placeholder = 0;
    double expectedscorebunker;

    double listvalues[600] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
        101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
        111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
        121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
        131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
        141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
        151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
        161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
        171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
        181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
        191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
        201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
        211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
        231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
        241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
        251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
        261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
        271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
        281, 282, 283, 284, 285, 286, 287, 288, 289, 290,
        291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
        301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
        311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
        321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
        331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
        341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
        351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
        361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
        371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
        381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
        391, 392, 393, 394, 395, 396, 397, 398, 399, 400,
        401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
        411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
        421, 422, 423, 424, 425, 426, 427, 428, 429, 430,
        431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
        441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
        451, 452, 453, 454, 455, 456, 457, 458, 459, 460,
        461, 462, 463, 464, 465, 466, 467, 468, 469, 470,
        471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
        481, 482, 483, 484, 485, 486, 487, 488, 489, 490,
        491, 492, 493, 494, 495, 496, 497, 498, 499, 500,
        501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
        511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
        521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
        531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
        541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
        551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
        561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
        571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
        581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
        591, 592, 593, 594, 595, 596, 597, 598, 599, 600 };
    double listvalues2[600] = { 1.72, 1.992, 2.184, 2.306, 2.37, 2.4, 2.41, 2.435, 2.447, 2.45, 2.462, 2.47, 2.473, 2.484, 2.5, 2.5, 2.512, 2.51, 2.518, 2.53, 2.551, 2.56, 2.571, 2.581, 2.595, 2.601, 2.618, 2.631, 2.645, 2.66, 2.69, 2.704, 2.719, 2.733, 2.748, 2.762, 2.777, 2.791, 2.806, 2.82, 2.837, 2.853, 2.87, 2.886, 2.903, 2.919, 2.936, 2.952, 2.969, 2.985, 3.002, 3.018, 3.035, 3.051, 3.068, 3.084, 3.101, 3.117, 3.134, 3.15, 3.155, 3.159, 3.164, 3.168, 3.173, 3.177, 3.182, 3.186, 3.191, 3.195, 3.2, 3.204, 3.209, 3.213, 3.218, 3.222, 3.227, 3.231, 3.236, 3.24, 3.24, 3.239, 3.239, 3.238, 3.238, 3.237, 3.273, 3.236, 3.236, 3.235, 3.235, 3.234, 3.234, 3.233, 3.233, 3.232, 3.232, 3.231, 3.231, 3.23, 3.229, 3.228, 3.227, 3.226, 3.225, 3.224, 3.223, 3.222, 3.221, 3.22, 3.219, 3.218, 3.217, 3.216, 3.215, 3.214, 3.213, 3.212, 3.211, 3.21, 3.211, 3.211, 3.212, 3.212, 3.213, 3.213, 3.214, 3.214, 3.215, 3.215, 3.216, 3.216, 3.217, 3.217, 3.217, 3.218, 3.218, 3.219, 3.22, 3.22, 3.223, 3.226, 3.229, 3.232, 3.235, 3.238, 3.241, 3.244, 3.247, 3.25, 3.253, 3.256, 3.259, 3.262, 3.265, 3.268, 3.271, 3.274, 23.77, 3.28, 3.286, 3.292, 3.298, 3.304, 3.31, 3.316, 3.322, 3.328, 3.334, 3.34, 3.346, 3.352, 3.358, 3.364, 3.37, 3.376, 3.372, 3.388, 3.394, 3.4, 3.408, 3.4158, 3.423, 3.43, 3.438, 3.445, 3.453, 3.46, 3.468, 3.475, 3.485, 3.49, 3.498, 3.505, 3.513, 3.52, 3.528, 3.535, 3.543, 3.55, 3.558, 3.565, 3.537, 3.58, 3.588, 3.595, 3.603, 3.61, 3.618, 3.625, 3.633, 3.64, 3.648, 3.655, 3.663, 3.67, 3.678, 3.685, 3.693, 3.7, 3.707, 3.714, 3.721, 3.728, 3.735, 3.742, 3.749, 3.756, 3.763, 3.77, 3.777, 3.784, 3.791, 3.798, 3.805, 3.812, 3.819, 3.826, 3.833, 3.84, 3.845, 3.849, 3.854, 3.858, 3.863, 3.867, 3.872, 3.876, 3.881, 3.885, 3.89, 3.894, 3.899, 3.903, 3.908, 3.912, 3.917, 3.921, 3.926, 3.93, 3.934, 3.937, 3.941, 3.944, 3.948, 3.951, 3.955, 3.958, 3.962, 3.965, 3.969, 3.972, 3.976, 3.979, 3.983, 3.986, 3.99, 3.993, 3.997, 4, 4.002, 4.004, 4.006, 4.008, 4.01, 4.012, 4.014, 4.016, 4.018, 4.02, 4.022, 4.024, 4.026, 4.028, 4.03, 4.032, 4.034, 4.036, 4.038, 4.04, 4.044, 4.048, 4.052, 4.056, 4.06, 4.064, 4.068, 4.072, 4.076, 4.08, 4.084, 4.088, 4.092, 4.096, 4.1, 4.104, 4.108, 4.112, 4.116, 4.12, 4.172, 4.134, 4.414, 4.148, 4.155, 4.162, 4.169, 4.176, 4.183, 4.19, 4.197, 4.204, 4.211, 4.218, 4.225, 4.232, 4.239, 4.246, 4.253, 4.26, 4.268, 4.275, 4.283, 4.29, 4.298, 4.305, 4.313, 4.32, 4.328, 4.335, 4.343, 4.35, 4.358, 4.365, 4.373, 4.38, 4.388, 4.395, 4.403, 4.41, 4.417, 4.424, 4.431, 4.438, 4.445, 4.452, 4.459, 4.466, 4.473, 4.48, 4.487, 4.494, 4.501, 4.508, 4.515, 4.522, 4.529, 4.536, 4.543, 4.55, 4.557, 4.564, 4.571, 4.578, 4.585, 4.592, 4.599, 4.606, 4.613, 4.62, 4.627, 4.634, 4.641, 4.648, 4.655, 4.662, 4.669, 4.676, 4.683, 4.69, 4.692, 4.694, 4.696, 4.698, 4.7, 4.702, 4.704, 4.706, 4.708, 4.71, 4.712, 4.714, 7.716, 7.718, 4.72, 4.722, 4.724, 4.726, 4.728, 4.73, 4.733, 4.735, 4.738, 4.74, 4.743, 4.745, 4.748, 4.75, 4.753, 4.755, 4.758, 4.76, 4.763, 4.765, 4.768, 4.77, 4.773, 4.775, 4.778, 4.878, 4.785, 4.789, 4.794, 4.798, 4.803, 4.807, 4.812, 4.816, 4.821, 4.825, 4.83, 4.834, 4.839, 4.843, 4.848, 4.852, 4.857, 4.861, 4.866, 4.87, 4.876, 4.881, 4.887, 4.892, 4.898, 4.903, 4.909, 4.914, 4.92, 4.925, 4.931, 4.936, 4.942, 4.947, 4.953, 4.958, 4.964, 4.969, 4.975, 4.98, 4.987, 4.993, 5, 5.003, 5.013, 75.019, 5.026, 5.032, 5.039, 5.045, 5.052, 5.058, 5.065, 5.071, 5.078, 5.084, 5.091, 5.097, 5.104, 5.11, 5.117, 5.123, 5.13, 5.136, 5.143, 5.149, 5.156, 5.162, 5.169, 5.175, 5.182, 5.188, 5.195, 5.201, 5.208, 5.214, 5.221, 5.227, 5.234, 5.24, 5.246, 5.252, 5.258, 5.264, 5.27, 5.276, 5.282, 5.288, 5.294, 5.3, 5.306, 5.312, 5.318, 5.324, 5.33, 5.336, 5.342, 5.348, 5.354, 5.36, 5.364, 5.368, 5.372, 5.376, 5.38, 5.384, 5.388, 5.392, 5.396, 5.4, 5.404, 5.408, 5.412, 5.146, 5.42, 5.424, 5.428, 5.432, 5.436, 5.44, 5.443, 5.445, 5.448, 5.45, 5.453, 5.455, 5.458, 5.46, 5.463, 5.465, 5.468, 5.47, 5.473, 5.475, 5.478, 5.48, 5.483, 5.485, 5.488, 5.49, 5.492, 5.493, 5.495, 5.496, 5.498, 5.499, 5.501, 5.502, 5.504, 5.505, 5.507, 5.508, 5.51, 5.511, 5.513, 5.514, 5.516, 5.517, 5.519, 5.52
    };

    for (int i = 0; i < yardage; i++) {

        if (yardage >= listvalues[i]) {
            placeholder = i;

        }

    }

    expectedscorebunker = listvalues2[placeholder];

   

    return expectedscorebunker;

}



double greenvalues(int yardage) {
    int placeholder=0;
    double expectedscoregreen;

    double listvalues[120] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
        101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
        111, 112, 113, 114, 115, 116, 117, 118, 119 };
    double listvalues2[120] = { 0, 1, 1.01, 1.05, 1.14, 1.24, 1.34, 1.43, 1.5, 1.56, 1.61, 1.66, 1.71, 1.75, 1.78, 1.795, 1.81, 1.825, 1.84, 1.855, 1.87, 1.881, 1.892, 1.903, 1.914, 1.925, 1.936, 1.947, 1.958, 1.969, 1.98, 1.988, 1.996, 2.004, 2.012, 2.02, 2.028, 2.036, 2.044, 2.052, 2.06, 2.068, 2.076, 2.084, 2.092, 2.1, 2.108, 2.166, 2.124, 2.132, 2.14, 2.147, 2.154, 2.161, 2.168, 2.175, 2.182, 2.189, 2.196, 2.203, 2.21, 2.215, 2.22, 2.225, 2.23, 2.235, 2.24, 2.245, 2.25, 2.255, 2.26, 2.265, 2.27, 2.275, 2.28, 2.285, 2.29, 2.295, 2.3, 2.305, 2.31, 2.315, 2.32, 2.325, 2.33, 2.335, 2.34, 2.345, 2.350, 2.355, 2.36, 2.364, 2.368, 2.372, 2.376, 2.38, 2.384, 2.388, 2.392, 2.396, 2.399, 2.402, 2.405, 2.408, 2.411, 2.414, 2.416, 2.418, 2.42, 2.422, 2.424, 2.426, 2.428, 2.43, 2.431, 2.432, 2.433, 2.434, 2.435, 2.436 };

    for (int i = 0; i < 120; i++) {

        if (yardage >= listvalues[i]) {
            placeholder = i;

        }

    }

    expectedscoregreen = listvalues2[placeholder];
   

    return expectedscoregreen;

}

double finalvaluescalculations() {
    double sum1 = 0;
    double sum2 = 0;
    double sum3 = 0;
    double sum4 = 0;
    double sum5 = 0;



    for (int i = 0; i < strokesgaineddrivingvector.size(); i++) {
        sum1 += strokesgaineddrivingvector[i];
    }

    for (int i = 0; i < strokesgainedapproachvector.size(); i++) {
        sum2 += strokesgainedapproachvector[i];
    }

    for (int i = 0; i < strokesgainedgreensidevector.size(); i++)
    {
        sum3 += strokesgainedgreensidevector[i];
    }

    for (int i = 0; i < strokesgainedputtingvector.size(); i++)
    {
        sum4 += strokesgainedputtingvector[i];
    }


    cout << "Strokes Gained Driving: " << sum1 << endl;
    cout << "Strokes Gained Approach: " << sum2 << endl;
    cout << "Strokes Gained Greenside: " << sum3 << endl;
    cout << "Strokes Gained Putting: " << sum4 << endl;
    
    sum5 = sum1 + sum2 + sum3 + sum4;

    if (sum5 >= 0) {
        cout << "Total Strokes Gained: " << sum5 << endl;
    }

    if (sum5 < 0) {
        cout << "Total Strokes Lost: " << sum5 << endl;
    }
   
    
    return 0;
}





double expectedscore(int yardage) {
    double expectedscore;
    int placeholderforyardage = 0;  // Initialize to 0 to avoid uninitialized use
    int yardagefromhole[660] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
        101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
        111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
        121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
        131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
        141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
        151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
        161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
        171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
        181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
        191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
        201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
        211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
        231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
        241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
        251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
        261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
        271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
        281, 282, 283, 284, 285, 286, 287, 288, 289, 290,
        291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
        301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
        311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
        321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
        331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
        341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
        351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
        361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
        371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
        381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
        391, 392, 393, 394, 395, 396, 397, 398, 399, 400,
        401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
        411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
        421, 422, 423, 424, 425, 426, 427, 428, 429, 430,
        431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
        441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
        451, 452, 453, 454, 455, 456, 457, 458, 459, 460,
        461, 462, 463, 464, 465, 466, 467, 468, 469, 470,
        471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
        481, 482, 483, 484, 485, 486, 487, 488, 489, 490,
        491, 492, 493, 494, 495, 496, 497, 498, 499, 500,
        501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
        511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
        521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
        531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
        541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
        551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
        561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
        571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
        581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
        591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650 };
    double yardagefromhole2[660] = { 1.263, 1.554, 1.767, 1.911, 1.991, 2.05, 2.09, 2.128, 2.162, 2.18, 2.216, 2.242, 2.262, 2.287, 2.31, 2.33, 2.351, 2.358, 2.373, 2.4, 2.416, 2.427, 2.439, 2.45, 2.46, 2.471, 2.483, 2.494, 2.507, 2.52, 2.5257, 2.5314, 2.5371, 2.5429, 2.5486, 2.5543, 2.56, 2.5657, 2.5714, 2.5771, 2.5829, 2.5886, 2.5943, 2.6, 2.6057, 2.6114, 2.6171, 2.6229, 2.6286, 2.6343, 2.64, 2.6457, 2.6514, 2.6571, 2.6629, 2.6686, 2.6743, 2.68, 2.6857, 2.6914, 2.6971, 2.7029, 2.7086, 2.7143, 2.72, 2.7257, 2.7314, 2.7371, 2.7429, 2.7486, 2.7543, 2.76, 2.7657, 2.7714, 2.7771, 2.7829, 2.7886, 2.7943, 2.8, 2.8057, 2.8114, 2.8171, 2.8229, 2.8286, 2.8343, 2.84, 2.8457, 2.8514, 2.8571, 2.8629, 2.8686, 2.8743, 2.88, 2.8857, 2.8914, 2.8971, 2.9029, 2.9086, 2.9143, 2.92, 2.924, 2.927, 2.931, 2.934, 2.938, 2.941, 2.945, 2.948, 2.952, 2.955, 2.959, 2.962, 2.966, 2.969, 2.973, 2.976, 2.98, 2.983, 2.987, 2.99, 2.989, 2.988, 2.987, 2.986, 2.985, 2.984, 2.983, 2.982, 2.981, 2.98, 2.979, 2.978, 2.977, 2.976, 2.975, 2.974, 2.973, 2.972, 2.971, 2.97, 2.971, 2.972, 2.973, 2.974, 2.975, 2.976, 2.977, 2.978, 2.979, 2.98, 2.981, 2.982, 2.983, 2.984, 2.985, 2.986, 2.987, 2.988, 2.989, 2.99, 2.993, 2.996, 2.999, 3.002, 3.005, 3.008, 3.011, 3.014, 3.017, 3.02, 3.023, 3.026, 3.029, 3.032, 3.035, 3.038, 3.041, 3.044, 3.047, 3.05, 3.054, 3.057, 3.061, 3.067, 3.068, 3.071, 3.075, 3.078, 3.082, 3.085, 3.089, 3.092, 3.096, 3.099, 3.103, 3.106, 3.11, 3.113, 3.117, 3.12, 3.123, 3.125, 3.128, 3.13, 3.133, 3.135, 3.138, 3.14, 3.143, 3.145, 3.148, 3.15, 3.153, 3.155, 3.158, 3.16, 3.163, 3.165, 3.168, 3.17, 3.174, 3.178, 3.182, 3.186, 3.19, 3.194, 3.139, 3.202, 3.206, 3.21, 3.214, 3.218, 3.222, 3.226, 3.23, 3.234, 3.238, 3.242, 3.246, 3.25, 3.26, 3.27, 3.28, 3.29, 3.3, 3.31, 3.32, 3.33, 3.34, 3.35, 3.36, 3.37, 3.38, 3.39, 3.4, 3.41, 3.42, 3.43, 3.44, 3.45, 3.46, 3.47, 3.48, 3.49, 3.5, 3.51, 3.52, 3.53, 3.54, 3.55, 3.56, 3.57, 3.58, 3.59, 3.6, 3.61, 3.62, 3.63, 3.64, 3.65, 3.653, 3.656, 3.659, 3.662, 3.665, 3.668, 3.671, 3.674, 3.677, 3.68, 3.683, 3.686, 3.689, 3.692, 3.695, 3.698, 3.701, 3.704, 3.707, 3.71, 3.714, 3.718, 3.722, 3.726, 3.73, 3.734, 3.738, 3.742, 3.746, 3.75, 3.754, 3.758, 3.762, 3.766, 3.77, 3.774, 3.778, 3.782, 3.786, 3.79, 3.794, 3.979, 3.801, 3.804, 3.808, 3.881, 3.815, 3.818, 3.882, 3.825, 3.829, 3.832, 3.286, 3.839, 3.843, 3.846, 3.85, 3.853, 3.857, 3.86, 3.863, 3.866, 3.869, 3.872, 3.875, 3.878, 3.881, 3.884, 3.887, 3.89, 3.893, 3.896, 3.889, 3.902, 3.905, 3.908, 3.911, 3.914, 3.917, 3.92, 3.922, 3.924, 3.926, 3.928, 3.93, 3.932, 3.934, 3.936, 3.938, 3.94, 3.942, 3.944, 3.946, 3.948, 3.95, 3.952, 3.954, 3.956, 3.958, 3.96, 3.962, 3.963, 3.965, 3.966, 3.968, 3.969, 3.971, 3.972, 3.974, 3.975, 3.977, 3.978, 3.98, 3.981, 3.983, 3.984, 3.986, 3.987, 3.989, 3.99, 3.992, 3.993, 3.995, 3.996, 3.998, 3.999, 4.001, 4.002, 4.004, 4.005, 4.007, 4.008, 4.01, 4.011, 4.013, 4.014, 4.016, 4.017, 4.019, 4.02, 4.023, 4.026, 4.029, 4.032, 4.035, 4.038, 4.041, 4.044, 4.047, 4.05, 4.053, 4.056, 4.059, 4.062, 4.065, 4.068, 4.071, 4.074, 4.077, 4.08, 4.085, 4.089, 4.094, 4.098, 4.103, 4.107, 4.112, 4.116, 4.121, 4.125, 4.13, 4.134, 4.139, 4.143, 4.148, 4.152, 4.157, 4.161, 4.166, 4.17, 4.176, 4.181, 4.187, 4.192, 4.198, 4.203, 4.209, 4.214, 4.22, 4.225, 4.231, 4.236, 4.242, 4.247, 4.253, 4.258, 4.264, 4.269, 4.275, 4.28, 4.287, 4.293, 4.3, 4.306, 4.313, 4.319, 4.326, 4.332, 4.339, 4.345, 4.352, 4.358, 4.365, 4.371, 4.378, 4.384, 4.391, 4.397, 4.404, 4.41, 4.417, 4.423, 4.43, 4.436, 4.443, 4.449, 4.456, 4.462, 4.469, 4.475, 4.482, 4.488, 4.495, 4.501, 4.508, 4.514, 4.521, 4.527, 4.534, 4.54, 4.546, 4.551, 4.557, 4.562, 4.568, 4.573, 4.579, 4.884, 4.59, 4.595, 4.601, 4.606, 4.612, 4.617, 4.623, 4.628, 4.634, 4.639, 4.645, 4.65, 4.655, 4.659, 4.664, 4.668, 4.673, 4.677, 4.682, 4.686, 4.691, 4.695, 4.7, 4.704, 4.709, 4.713, 4.718, 4.722, 4.727, 4.31, 4.736, 4.74, 4.743, 4.745, 4.748, 4.75, 4.753, 4.755, 4.758, 4.76, 4.763, 4.765, 4.768, 4.77, 4.773, 4.775, 4.778, 4.78, 4.783, 4.785, 4.788, 4.79, 4.792, 4.793, 4.795, 4.796, 4.798, 4.799, 4.801, 4.802, 4.804, 4.805, 4.807, 4.808, 4.81, 4.811, 4.813, 4.814, 4.816, 4.817, 4.819, 4.82, 4.821, 4.823, 4.824, 4.825, 4.826, 4.828, 4.829, 4.83, 4.831, 4.833, 4.834, 4.835, 4.836, 4.838, 4.839, 4.84, 4.841, 4.843, 4.844, 4.845, 4.846, 4.847, 4.848, 4.849, 4.85, 4.851, 4.852, 4.853, 4.854, 4.855, 4.856, 4.857, 4.858, 4.859, 4.86, 4.861, 4.862, 4.863, 4.864, 4.865, 4.922, 4.979, 5.035, 5.092, 5.149, 5.206, 5.262, 5.319, 5.376, 5.433, 5.489, 5.546, 5.603, 5.66, 5.716, 5.773, 5.83, 5.887, 5.943, 6 };

    for (int i = 0; i < yardage; i++) {
        if (yardage >= yardagefromhole[i]) {
            placeholderforyardage = i;
           
        }
    }
    
    expectedscore = yardagefromhole2[placeholderforyardage];
    

    return expectedscore;
}

double teevalues(int yardage) {
    double expectedscore;

    int placeholderforyardage = 0;  // Initialize to 0 to avoid uninitialized use
    int yardagefromhole[660] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
        101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
        111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
        121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
        131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
        141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
        151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
        161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
        171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
        181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
        191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
        201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
        211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
        231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
        241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
        251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
        261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
        271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
        281, 282, 283, 284, 285, 286, 287, 288, 289, 290,
        291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
        301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
        311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
        321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
        331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
        341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
        351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
        361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
        371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
        381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
        391, 392, 393, 394, 395, 396, 397, 398, 399, 400,
        401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
        411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
        421, 422, 423, 424, 425, 426, 427, 428, 429, 430,
        431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
        441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
        451, 452, 453, 454, 455, 456, 457, 458, 459, 460,
        461, 462, 463, 464, 465, 466, 467, 468, 469, 470,
        471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
        481, 482, 483, 484, 485, 486, 487, 488, 489, 490,
        491, 492, 493, 494, 495, 496, 497, 498, 499, 500,
        501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
        511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
        521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
        531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
        541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
        551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
        561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
        571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
        581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
        591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660 };
    double yardagefromhole2[660] = { 1.263, 1.554, 1.767, 1.911, 1.991, 2.05, 2.09, 2.128, 2.162, 2.18, 2.216, 2.242, 2.262, 2.287, 2.31, 2.33, 2.351, 2.358, 2.373, 2.4, 2.416, 2.427, 2.439, 2.45, 2.46, 2.471, 2.483, 2.494, 2.507, 2.52, 2.5257, 2.5314, 2.5371, 2.5429, 2.5486, 2.5543, 2.56, 2.5657, 2.5714, 2.5771, 2.5829, 2.5886, 2.5943, 2.6, 2.6057, 2.6114, 2.6171, 2.6229, 2.6286, 2.6343, 2.64, 2.6457, 2.6514, 2.6571, 2.6629, 2.6686, 2.6743, 2.68, 2.6857, 2.6914, 2.6971, 2.7029, 2.7086, 2.7143, 2.72, 2.7257, 2.7314, 2.7371, 2.7429, 2.7486, 2.7543, 2.76, 2.7657, 2.7714, 2.7771, 2.7829, 2.7886, 2.7943, 2.8, 2.8057, 2.8114, 2.8171, 2.8229, 2.8286, 2.8343, 2.84, 2.8457, 2.8514, 2.8571, 2.8629, 2.8686, 2.8743, 2.88, 2.8857, 2.8914, 2.8971, 2.9029, 2.9086, 2.9143, 2.92, 2.924, 2.927, 2.931, 2.934, 2.938, 2.941, 2.945, 2.948, 2.952, 2.955, 2.959, 2.962, 2.966, 2.969, 2.973, 2.976, 2.98, 2.983, 2.987, 2.99, 2.989, 2.988, 2.987, 2.986, 2.985, 2.984, 2.983, 2.982, 2.981, 2.98, 2.979, 2.978, 2.977, 2.976, 2.975, 2.974, 2.973, 2.972, 2.971, 2.97, 2.971, 2.972, 2.973, 2.974, 2.975, 2.976, 2.977, 2.978, 2.979, 2.98, 2.981, 2.982, 2.983, 2.984, 2.985, 2.986, 2.987, 2.988, 2.989, 2.99, 2.993, 2.996, 2.999, 3.002, 3.005, 3.008, 3.011, 3.014, 3.017, 3.02, 3.023, 3.026, 3.029, 3.032, 3.035, 3.038, 3.041, 3.044, 3.047, 3.05, 3.054, 3.057, 3.061, 3.067, 3.068, 3.071, 3.075, 3.078, 3.082, 3.085, 3.089, 3.092, 3.096, 3.099, 3.103, 3.106, 3.11, 3.113, 3.117, 3.12, 3.123, 3.125, 3.128, 3.13, 3.133, 3.135, 3.138, 3.14, 3.143, 3.145, 3.148, 3.15, 3.153, 3.155, 3.158, 3.16, 3.163, 3.165, 3.168, 3.17, 3.174, 3.178, 3.182, 3.186, 3.19, 3.194, 3.139, 3.202, 3.206, 3.21, 3.214, 3.218, 3.222, 3.226, 3.23, 3.234, 3.238, 3.242, 3.246, 3.25, 3.26, 3.27, 3.28, 3.29, 3.3, 3.31, 3.32, 3.33, 3.34, 3.35, 3.36, 3.37, 3.38, 3.39, 3.4, 3.41, 3.42, 3.43, 3.44, 3.45, 3.46, 3.47, 3.48, 3.49, 3.5, 3.51, 3.52, 3.53, 3.54, 3.55, 3.56, 3.57, 3.58, 3.59, 3.6, 3.61, 3.62, 3.63, 3.64, 3.65, 3.653, 3.656, 3.659, 3.662, 3.665, 3.668, 3.671, 3.674, 3.677, 3.68, 3.683, 3.686, 3.689, 3.692, 3.695, 3.698, 3.701, 3.704, 3.707, 3.71, 3.714, 3.718, 3.722, 3.726, 3.73, 3.734, 3.738, 3.742, 3.746, 3.75, 3.754, 3.758, 3.762, 3.766, 3.77, 3.774, 3.778, 3.782, 3.786, 3.79, 3.794, 3.979, 3.801, 3.804, 3.808, 3.881, 3.815, 3.818, 3.882, 3.825, 3.829, 3.832, 3.286, 3.839, 3.843, 3.846, 3.85, 3.853, 3.857, 3.86, 3.863, 3.866, 3.869, 3.872, 3.875, 3.878, 3.881, 3.884, 3.887, 3.89, 3.893, 3.896, 3.889, 3.902, 3.905, 3.908, 3.911, 3.914, 3.917, 3.92, 3.922, 3.924, 3.926, 3.928, 3.93, 3.932, 3.934, 3.936, 3.938, 3.94, 3.942, 3.944, 3.946, 3.948, 3.95, 3.952, 3.954, 3.956, 3.958, 3.96, 3.962, 3.963, 3.965, 3.966, 3.968, 3.969, 3.971, 3.972, 3.974, 3.975, 3.977, 3.978, 3.98, 3.981, 3.983, 3.984, 3.986, 3.987, 3.989, 3.99, 3.992, 3.993, 3.995, 3.996, 3.998, 3.999, 4.001, 4.002, 4.004, 4.005, 4.007, 4.008, 4.01, 4.011, 4.013, 4.014, 4.016, 4.017, 4.019, 4.02, 4.023, 4.026, 4.029, 4.032, 4.035, 4.038, 4.041, 4.044, 4.047, 4.05, 4.053, 4.056, 4.059, 4.062, 4.065, 4.068, 4.071, 4.074, 4.077, 4.08, 4.085, 4.089, 4.094, 4.098, 4.103, 4.107, 4.112, 4.116, 4.121, 4.125, 4.13, 4.134, 4.139, 4.143, 4.148, 4.152, 4.157, 4.161, 4.166, 4.17, 4.176, 4.181, 4.187, 4.192, 4.198, 4.203, 4.209, 4.214, 4.22, 4.225, 4.231, 4.236, 4.242, 4.247, 4.253, 4.258, 4.264, 4.269, 4.275, 4.28, 4.287, 4.293, 4.3, 4.306, 4.313, 4.319, 4.326, 4.332, 4.339, 4.345, 4.352, 4.358, 4.365, 4.371, 4.378, 4.384, 4.391, 4.397, 4.404, 4.41, 4.417, 4.423, 4.43, 4.436, 4.443, 4.449, 4.456, 4.462, 4.469, 4.475, 4.482, 4.488, 4.495, 4.501, 4.508, 4.514, 4.521, 4.527, 4.534, 4.54, 4.546, 4.551, 4.557, 4.562, 4.568, 4.573, 4.579, 4.884, 4.59, 4.595, 4.601, 4.606, 4.612, 4.617, 4.623, 4.628, 4.634, 4.639, 4.645, 4.65, 4.655, 4.659, 4.664, 4.668, 4.673, 4.677, 4.682, 4.686, 4.691, 4.695, 4.7, 4.704, 4.709, 4.713, 4.718, 4.722, 4.727, 4.31, 4.736, 4.74, 4.743, 4.745, 4.748, 4.75, 4.753, 4.755, 4.758, 4.76, 4.763, 4.765, 4.768, 4.77, 4.773, 4.775, 4.778, 4.78, 4.783, 4.785, 4.788, 4.79, 4.792, 4.793, 4.795, 4.796, 4.798, 4.799, 4.801, 4.802, 4.804, 4.805, 4.807, 4.808, 4.81, 4.811, 4.813, 4.814, 4.816, 4.817, 4.819, 4.82, 4.821, 4.823, 4.824, 4.825, 4.826, 4.828, 4.829, 4.83, 4.831, 4.833, 4.834, 4.835, 4.836, 4.838, 4.839, 4.84, 4.841, 4.843, 4.844, 4.845, 4.846, 4.847, 4.848, 4.849, 4.85, 4.851, 4.852, 4.853, 4.854, 4.855, 4.856, 4.857, 4.858, 4.859, 4.86, 4.861, 4.862, 4.863, 4.864, 4.865, 4.922, 4.979, 5.035, 5.092, 5.149, 5.206, 5.262, 5.319, 5.376, 5.433, 5.489, 5.546, 5.603, 5.66, 5.716, 5.773, 5.83, 5.887, 5.943, 6 };

    for (int i = 0; i < yardage; i++) {
        if (yardage >= yardagefromhole[i]) {
            placeholderforyardage = i;
            
        }
    }

    expectedscore = yardagefromhole2[placeholderforyardage];
   

    return expectedscore;
}




int shotnumber(double expectedscoreValue, int yardage1) {
    int newlie = 0;
    int previouslie = 0;
    int placeholderlie = 0;
    int shotnumberplaceholder = 0;
    int previousyardage = 1000;
    int yardage;
    int totalshots = 0;
    int finaltotalshots = 0;
    const char* shotnumber1[15] = { "First", "Second", "Third", "Fourth", "Fifth", "Sixth", "Seventh", "Eighth", "Ninth", "Tenth", "Eleventh", "Twelfth", "Thirteenth", "Fourteenth", "Fifteenth" };

    while (newlie != 6) {
        double strokesgaineddriving;
        double strokesgainedirons;
        double strokesgainedputting;
        double holeout = 0;

      

        double expectedscore;
        double previousexpectedscore = expectedscoreValue;
        double expectedscoreGreen;

        
        
        cout << "Enter the Yardage (Feet if on the Green) After " << shotnumber1[shotnumberplaceholder] << " Shot: ";
        cin >> yardage;

       

        cout << "Enter Lie After " << shotnumber1[shotnumberplaceholder] << " Shot (1 = Fairway, 2 = Rough, 3 = Bunker, 4 = Green, Drop Penalty = 5): ";
        cin >> newlie;

        shotnumberplaceholder++;
        totalshots++;
        if (newlie == 1) {
           
            expectedscore = fairwayvalues(yardage); 
           
            if (shotnumberplaceholder == 1) {
                strokesgaineddriving = strokesgaineddrivingcalculations(expectedscoreValue, expectedscore);
                addDrive(strokesgaineddriving);
                totalfairwayshit.push_back(1);

                if (shotnumberplaceholder == 1 && yardage1 < 240) {

                    
                    removelastelementdrivingvector();
                    addApproach(strokesgaineddriving);

                    
                }
                
            }
           
          

            else {
                strokesgainedirons = strokesgainedironcalculations(expectedscoreValue, expectedscore);
                addApproach(strokesgainedirons);
            }

            

            if (previousyardage < 50 && yardage < 50) {
               
                removelastelementapproachvector();
                addGreenside(strokesgainedirons);

            }
            
            expectedscoreValue = expectedscore;
            previousexpectedscore = expectedscore;
            
            previouslie = newlie;
            previousyardage = yardage;
            
           

        }
        else if (newlie == 2) {
            expectedscore = roughvalues(yardage);
          
            if (shotnumberplaceholder == 1) {
                strokesgaineddriving = strokesgaineddrivingcalculations(expectedscoreValue, expectedscore);
                addDrive(strokesgaineddriving);
                totalfairwayshit.push_back(0);
               
              
                if (shotnumberplaceholder == 1 && yardage1 < 240) {
                    strokesgainedirons = 0.0;
                    removelastelementdrivingvector();
                    addApproach(strokesgaineddriving);

                }
               
            }
            else {
                strokesgainedirons = strokesgainedironcalculations(expectedscoreValue, expectedscore);
                addApproach(strokesgainedirons);
            }

           

            if (previousyardage < 50 && yardage < 50) {
                
                removelastelementapproachvector();
                addGreenside(strokesgainedirons);
            }
            
            previousexpectedscore = expectedscore;
            previouslie = newlie;
            previousyardage = yardage;
            expectedscoreValue = expectedscore;

        }
        else if (newlie == 3) {
            expectedscore = bunkervalues(yardage);
           
            if (shotnumberplaceholder == 1) {
                strokesgaineddriving = strokesgaineddrivingcalculations(expectedscoreValue, expectedscore);
                addDrive(strokesgaineddriving);
                totalfairwayshit.push_back(0);
               
               

                if (shotnumberplaceholder == 1 && yardage1 < 240) {
                    strokesgainedirons = 0.0;
                    removelastelementdrivingvector();
                    addApproach(strokesgaineddriving);

                }
              
            }
            else {
                strokesgainedirons = strokesgainedironcalculations(expectedscoreValue, expectedscore);
                addApproach(strokesgainedirons);
            }

            

            if (previousyardage < 50 && yardage < 50) {
               
                removelastelementapproachvector();
                addGreenside(strokesgainedirons);

            }
            
            previousexpectedscore = expectedscore;
            
            previouslie = newlie;
            previousyardage = yardage;
            expectedscoreValue = expectedscore;

        }
        else if (newlie == 4) {
            
            
            if (shotnumberplaceholder == 1) {
                previousyardage = yardage1; 
                expectedscore = teevalues(previousyardage); 
                expectedscoreGreen = greenvalues(yardage);
              

                strokesgaineddriving = expectedscore - expectedscoreGreen - 1;
                addDrive(strokesgaineddriving);
                totalfairwayshit.push_back(0);
                
                if (shotnumberplaceholder == 1 && yardage1 < 240) {
                    totalgreensinregulation.push_back(1); //what I was working on last
                    removelastelementdrivingvector();
                    addApproach(strokesgaineddriving);
                    if (yardage == 0) {
                        
                        addtotalshots(totalshots);
                        break;
                    }

                }

            }

            expectedscoreGreen = greenvalues(yardage);

           
            


            if (newlie == 4 && previouslie != 4 && previousyardage >= 50 && shotnumberplaceholder != 1) {
               
                expectedscore = greenvalues(yardage); 

                
                
                strokesgainedputting = strokesgainedputtingcalculations(expectedscoreValue, expectedscore);
                
                strokesgainedirons = 0.0;
                


               
                if (previouslie == 0 ||previouslie == 1 || previouslie == 2 || previouslie == 3) {

                    
                   
                   

                    removelastelementputtingvector();
                    addApproach(strokesgainedputting);
                    
                    if (yardage == 0) {
                        
                        addtotalshots(totalshots);
                        break;
                    }
                } 

           
            }


            if (newlie == 4 && previouslie != 4 && previousyardage < 50 && shotnumberplaceholder !=1) {

                expectedscore = greenvalues(yardage); 

               

                strokesgainedputting = strokesgainedputtingcalculations(expectedscoreValue, expectedscore);

                strokesgainedirons = 0.0;
               



                if (previouslie == 0 || previouslie == 1 || previouslie == 2 || previouslie == 3) {



                   

                    removelastelementputtingvector();
                    addGreenside(strokesgainedputting);

                    if (yardage == 0) {
                       
                        addtotalshots(totalshots);
                        break;
                    }
                }


            }


            if (newlie == 4 && previouslie == 4) {
                
               
                expectedscore = greenvalues(yardage);
                strokesgainedputting = strokesgainedputtingcalculations(expectedscoreValue, expectedscore);
                addPutting(strokesgainedputting);

                if (yardage == 0) {
                    
                    
                    addtotalshots(totalshots);
                    break;
                }
            }

            
            previouslie = newlie;
            previousyardage = yardage;
            expectedscoreValue = expectedscoreGreen;
           
            

        }
        else if (newlie == 5) {
            int replayshot = 0;
            int dropyardage = 0;
            int droplie = 0;
            int yardage = yardage1;
            int yardage2;
            int previouslie = 0;
            double newexpectedscore = 0;
            double newexpectedscore2 = 0;
            int randomvariable = 0;
            double finalexpectedscore = 0;

            cout << "1 = Replay Shot From Same Position" << endl;
            cout << "2 = Replay Shot From Relief" << endl;

            cin >> replayshot;

            if (replayshot == 1) {
                totalshots++;
                if (shotnumberplaceholder == 1 && yardage > 230) {
                    strokesgaineddrivingvector.push_back(-1);
                    shotnumberplaceholder++;
                  
                    randomvariable++;
                    
                    
                }

                if (shotnumberplaceholder == 1 && yardage < 230) {
                    strokesgainedapproachvector.push_back(-1);
                    shotnumberplaceholder++;
                    randomvariable++;
                   
                    
                }

                cout << "Enter the yardage you will be playing after your dropped shot" << endl;
                cin >> dropyardage;
                previousyardage = dropyardage;
               

                if (dropyardage >= 50 && shotnumberplaceholder != 1 && randomvariable ==0) {
                    
                    strokesgainedapproachvector.push_back(-1);
                    shotnumberplaceholder++;
                    
                    
                   

                }

                if (dropyardage < 50 && shotnumberplaceholder != 1 && randomvariable == 0) {
                    
                    strokesgainedgreensidevector.push_back(-1);
                    shotnumberplaceholder++;
                    
                 
                }
            }

            if (replayshot == 2) {
                cout << "Enter in your previous yardage before taking relief" << endl;
                cin >> yardage;
                yardage2 = yardage;
                cout << "Enter in your previous lie before taking relief (0 = Tee, 1 = Fairway, 2 = Rough, 3 = Bunker): " << endl;
                cin >> previouslie;
              
                totalshots++;

                if (previouslie == 0) {
                    newexpectedscore = teevalues(yardage); 
                }

                if (previouslie == 1) {
                    newexpectedscore = fairwayvalues(yardage);

                }

                if (previouslie == 2) {
                    newexpectedscore = roughvalues(yardage);

                }

                if (previouslie == 3) {
                    newexpectedscore = bunkervalues(yardage);

                }
                
                cout << "Enter in your new yardage after taking relief" << endl;
                cin >> yardage;
                cout << "Enter in your new lie after taking relief" << endl;
                cin >> previouslie;

                if (previouslie == 1) {
                    newexpectedscore2 = fairwayvalues(yardage);

                }

                if (previouslie == 2) {
                    newexpectedscore2 = roughvalues(yardage);

                }

                if (previouslie == 3) {
                    newexpectedscore2 = bunkervalues(yardage);

                }

                finalexpectedscore = newexpectedscore - newexpectedscore2 - 1;
                

                if (yardage2 >= 50) {
                    strokesgainedapproachvector.push_back(finalexpectedscore);
                }

                if (yardage2 < 50) {
                    strokesgainedgreensidevector.push_back(finalexpectedscore);
                }
               
               
                expectedscoreValue = newexpectedscore2;
                shotnumberplaceholder++;
               
            }
        }
      
        

        else if (newlie == 6){



            break;
        }
        
        
        

    }

    
   
    return 0;
}





int main() {
    int lie = 0;
    int roundnumberstarter = 0;
    int totalpar = 0;
    int totalshots = 0;
   
    cout << "Enter the Par of the Course: " ;
    cin >> totalpar;
    
   while (lie != 5) {
        int Holes[19] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 };

        
         for (int i = 0; i < 19; i++) {
               if (Holes[i] != 19) {
                    int yardage1;
                    double expectedscoreValue = 0.0;
                    
                    cout << "You are on hole number " << Holes[i] << endl;
                    cout << "Enter the yardage of the hole: ";
                    cin >> yardage1;



                    expectedscoreValue = expectedscore(yardage1);

                    expectedscoreValue = shotnumber(expectedscoreValue, yardage1);


                    




                }
                else if (Holes[i] == 19) {
                    lie = 5;
                }
            }
        }
    
    
    

    finalvaluescalculations();
    totalshotscalculations(totalpar);
    //testingcalculations(); useful if you need to test every value

    
    cout << "You have finished your round" << endl;
    system("pause");
    return 0;
}